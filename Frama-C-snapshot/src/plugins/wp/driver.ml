# 27 "driver.mll"
 

  open Qed.Logic
  open Lexing
  open Cil_types
  open LogicBuiltins

  type bal = [ `Default | `Left | `Right | `Nary ]

  type token =
    | EOF
    | KEY of string
    | BOOLEAN
    | INTEGER
    | REAL
    | INT of ikind
    | FLT of fkind
    | KIND of kind
    | ID of string
    | LINK of string
    | RECLINK of (string * (string * bal)) list
    | FIELD of string * string

  let keywords = [
    "library" , KEY "library" ;
    "type" , KEY "type" ;
    "ctor" , KEY "ctor" ;
    "logic" , KEY "logic" ;
    "predicate" , KEY "predicate" ;
    "boolean" , BOOLEAN ;
    "integer" , INTEGER ;
    "real" , REAL ;
    "char" , INT IChar ;
    "short" , INT IShort ;
    "int" , INT IInt ;
    "unsigned" , INT IUInt ;
    "float" , FLT FFloat ;
    "float32" , KIND (F Ctypes.Float32) ;
    "float64" , KIND (F Ctypes.Float64) ;
    "double" , FLT FDouble ;
  ]

  let ident x = try List.assoc x keywords with Not_found -> ID x

  let newline lexbuf =
    lexbuf.lex_curr_p <-
      { lexbuf.lex_curr_p with pos_lnum = succ lexbuf.lex_curr_p.pos_lnum }

  let rec conv_bal default (name,bal) =
    match bal with
    | `Default -> conv_bal default (name,default)
    | `Left  -> Qed.Engine.F_left name
    | `Right -> Qed.Engine.F_right name
    | `Nary  ->
        if Qed.Plib.is_template name
        then Qed.Engine.F_subst name
        else Qed.Engine.F_call name


# 62 "driver.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\246\255\000\000\001\000\248\255\249\255\078\000\160\000\
    \017\000\003\000\254\255\255\255\251\255\027\000\252\255\236\000\
    \055\001\130\001\029\001\252\255\253\255\013\000\255\255\254\255\
    \244\001\251\255\252\255\063\002\148\002\006\000\255\255\187\001\
    \250\255\005\003\254\255\255\255\251\255\252\255\253\255\057\003\
    \251\255\135\003\217\003\253\255\254\255\008\000\255\255\192\000\
    \252\255\253\255\254\255\009\000\075\004\251\255\252\255\150\004\
    \235\004\254\255\014\000\025\003\251\255\252\255\253\255\249\001\
    \255\255\093\005\251\255\171\005\253\005\253\255\254\255\250\001\
    \255\255\018\002\252\255\253\255\254\255\000\002\111\006\251\255\
    \252\255\186\006\015\007\254\255\001\002\010\003\028\000\002\002\
    \255\255\024\000\040\000\034\000\037\000\037\000\053\000\001\000\
    \253\255\056\000\050\000\003\000\252\255\070\000\058\000\004\000\
    \251\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\009\000\009\000\255\255\255\255\005\000\009\000\
    \009\000\002\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\000\255\255\255\255\255\255\255\255\003\000\255\255\255\255\
    \255\255\255\255\255\255\002\000\004\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\004\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\002\000\
    \004\000\255\255\000\000\255\255\255\255\255\255\255\255\001\000\
    \255\255\255\255\255\255\003\000\004\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\002\000\004\000\255\255\000\000\004\000\255\255\001\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\013\000\000\000\255\255\
    \255\255\255\255\019\000\000\000\000\000\255\255\000\000\000\000\
    \025\000\000\000\000\000\255\255\255\255\255\255\000\000\034\000\
    \000\000\036\000\000\000\000\000\000\000\000\000\000\000\040\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\000\000\048\000\
    \000\000\000\000\000\000\255\255\053\000\000\000\000\000\255\255\
    \255\255\000\000\255\255\060\000\000\000\000\000\000\000\255\255\
    \000\000\066\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \000\000\074\000\000\000\000\000\000\000\255\255\079\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\010\000\000\000\009\000\009\000\000\000\029\000\
    \009\000\045\000\051\000\029\000\000\000\045\000\051\000\058\000\
    \000\000\000\000\000\000\058\000\000\000\000\000\000\000\000\000\
    \009\000\000\000\005\000\009\000\000\000\014\000\029\000\000\000\
    \045\000\051\000\096\000\002\000\100\000\104\000\058\000\008\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\003\000\012\000\023\000\001\000\001\000\000\000\
    \013\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\000\000\007\000\000\000\000\000\006\000\
    \000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\004\000\015\000\101\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \089\000\097\000\090\000\092\000\093\000\094\000\091\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\095\000\098\000\099\000\102\000\006\000\103\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\051\000\050\000\000\000\000\000\051\000\000\000\000\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \051\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\000\000\000\000\049\000\000\000\006\000\
    \011\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\255\255\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\021\000\
    \017\000\000\000\000\000\016\000\000\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\000\000\000\000\000\000\000\000\016\000\000\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\035\000\000\000\000\000\
    \000\000\016\000\000\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\029\000\030\000\000\000\
    \000\000\029\000\063\000\071\000\000\000\000\000\063\000\071\000\
    \000\000\077\000\084\000\087\000\000\000\077\000\084\000\087\000\
    \000\000\000\000\000\000\000\000\029\000\000\000\026\000\033\000\
    \000\000\063\000\071\000\077\000\076\000\022\000\000\000\077\000\
    \077\000\084\000\087\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
    \000\000\000\000\077\000\000\000\000\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\075\000\
    \028\000\000\000\000\000\027\000\000\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\000\000\000\000\000\000\000\000\027\000\000\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\000\000\032\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\000\000\
    \000\000\000\000\000\000\027\000\255\255\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\037\000\
    \000\000\000\000\255\255\087\000\088\000\000\000\000\000\087\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\063\000\064\000\000\000\000\000\063\000\038\000\
    \000\000\000\000\087\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\086\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\063\000\000\000\062\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\045\000\044\000\000\000\000\000\045\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\038\000\046\000\000\000\000\000\038\000\
    \000\000\038\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\061\000\042\000\000\000\000\000\
    \041\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\000\000\000\000\043\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\000\000\000\000\000\000\000\000\041\000\000\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\000\000\000\000\000\000\000\000\
    \041\000\255\255\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\058\000\057\000\000\000\000\000\
    \058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\058\000\000\000\054\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\000\000\056\000\
    \000\000\000\000\055\000\000\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\000\000\000\000\000\000\000\000\055\000\000\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\000\000\000\000\
    \000\000\000\000\055\000\255\255\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\071\000\070\000\
    \000\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\071\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\000\000\
    \072\000\000\000\000\000\000\000\000\000\000\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \000\000\068\000\000\000\000\000\067\000\000\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \000\000\000\000\069\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\000\000\000\000\
    \000\000\000\000\067\000\000\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \000\000\000\000\000\000\000\000\067\000\255\255\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \084\000\083\000\000\000\000\000\084\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\
    \000\000\080\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\000\000\082\000\000\000\000\000\081\000\000\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\000\000\000\000\000\000\
    \000\000\081\000\000\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\000\000\000\000\000\000\000\000\081\000\255\255\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\009\000\000\000\255\255\029\000\
    \009\000\045\000\051\000\029\000\255\255\045\000\051\000\058\000\
    \255\255\255\255\255\255\058\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\009\000\255\255\013\000\029\000\255\255\
    \045\000\051\000\095\000\000\000\099\000\103\000\058\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\021\000\002\000\003\000\255\255\
    \008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\089\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \086\000\090\000\086\000\091\000\092\000\093\000\086\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\094\000\097\000\098\000\101\000\006\000\102\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\047\000\047\000\255\255\255\255\047\000\255\255\255\255\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \047\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\255\255\255\255\047\000\255\255\007\000\
    \000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\013\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\255\255\018\000\
    \255\255\255\255\255\255\255\255\255\255\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\018\000\
    \015\000\255\255\255\255\015\000\255\255\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\255\255\255\255\255\255\255\255\016\000\255\255\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\255\255\255\255\255\255\255\255\
    \047\000\255\255\255\255\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\031\000\255\255\255\255\
    \255\255\017\000\255\255\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\024\000\024\000\255\255\
    \255\255\024\000\063\000\071\000\255\255\255\255\063\000\071\000\
    \255\255\077\000\084\000\087\000\255\255\077\000\084\000\087\000\
    \255\255\255\255\255\255\255\255\024\000\255\255\024\000\031\000\
    \255\255\063\000\071\000\073\000\073\000\018\000\255\255\073\000\
    \077\000\084\000\087\000\255\255\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\255\255\255\255\
    \255\255\255\255\073\000\255\255\255\255\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\073\000\
    \024\000\255\255\255\255\024\000\255\255\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\255\255\255\255\255\255\255\255\027\000\255\255\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\255\255\031\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\255\255\
    \255\255\255\255\255\255\028\000\024\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\033\000\
    \255\255\255\255\073\000\085\000\085\000\255\255\255\255\085\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\059\000\059\000\255\255\255\255\059\000\033\000\
    \255\255\255\255\085\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\085\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\059\000\255\255\059\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\039\000\039\000\255\255\255\255\039\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\039\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\033\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\033\000\039\000\255\255\255\255\033\000\
    \255\255\033\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\059\000\039\000\255\255\255\255\
    \039\000\255\255\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\255\255\255\255\039\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\255\255\255\255\255\255\255\255\041\000\255\255\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\255\255\255\255\255\255\033\000\255\255\255\255\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\059\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\255\255\255\255\255\255\255\255\
    \042\000\039\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\052\000\052\000\255\255\255\255\
    \052\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\052\000\255\255\052\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\255\255\052\000\
    \255\255\255\255\052\000\255\255\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\255\255\255\255\255\255\255\255\055\000\255\255\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\255\255\255\255\
    \255\255\255\255\056\000\052\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\065\000\065\000\
    \255\255\255\255\065\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\065\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\255\255\
    \065\000\255\255\255\255\255\255\255\255\255\255\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \255\255\065\000\255\255\255\255\065\000\255\255\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \255\255\255\255\065\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\255\255\255\255\
    \255\255\255\255\067\000\255\255\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \255\255\255\255\255\255\255\255\068\000\065\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \078\000\078\000\255\255\255\255\078\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\078\000\
    \255\255\078\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\255\255\078\000\255\255\255\255\078\000\255\255\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\255\255\255\255\255\255\
    \255\255\081\000\255\255\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\255\255\255\255\255\255\255\255\082\000\078\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\075\000\150\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\000\000\000\000\000\000\000\000\001\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\
    \000\000\000\000\001\000\000\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\255\255\255\255\
    \255\255\255\255\006\000\255\255\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\255\255\255\255\255\255\255\255\007\000\255\255\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_code =
   "\255\001\255\255\000\001\255";
}

let rec tok lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1); __ocaml_lex_tok_rec lexbuf 0
and __ocaml_lex_tok_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 91 "driver.mll"
        ( EOF )
# 789 "driver.ml"

  | 1 ->
# 92 "driver.mll"
         ( newline lexbuf ; tok lexbuf )
# 794 "driver.ml"

  | 2 ->
# 93 "driver.mll"
           ( tok lexbuf )
# 799 "driver.ml"

  | 3 ->
# 94 "driver.mll"
                        ( newline lexbuf ; tok lexbuf )
# 804 "driver.ml"

  | 4 ->
# 95 "driver.mll"
         ( comment lexbuf )
# 809 "driver.ml"

  | 5 ->
let
# 96 "driver.mll"
             a
# 815 "driver.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 96 "driver.mll"
               ( ident a )
# 819 "driver.ml"

  | 6 ->
# 97 "driver.mll"
        ( LINK (string_val (Buffer.create 10) lexbuf) )
# 824 "driver.ml"

  | 7 ->
# 98 "driver.mll"
        ( RECLINK(reclink [] lexbuf) )
# 829 "driver.ml"

  | 8 ->
let
# 99 "driver.mll"
              group
# 835 "driver.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 99 "driver.mll"
                                   var
# 840 "driver.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 1) lexbuf.Lexing.lex_curr_pos in
# 99 "driver.mll"
                                        ( FIELD(group,var) )
# 844 "driver.ml"

  | 9 ->
# 100 "driver.mll"
                    ( KEY (Lexing.lexeme lexbuf) )
# 849 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_tok_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 18
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 103 "driver.mll"
        ( failwith "Unterminated comment" )
# 861 "driver.ml"

  | 1 ->
# 104 "driver.mll"
         ( tok lexbuf )
# 866 "driver.ml"

  | 2 ->
# 105 "driver.mll"
         ( newline lexbuf ; comment lexbuf )
# 871 "driver.ml"

  | 3 ->
# 106 "driver.mll"
      ( comment lexbuf )
# 876 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and value lexbuf =
   __ocaml_lex_value_rec lexbuf 24
and __ocaml_lex_value_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 109 "driver.mll"
           ( newline lexbuf ; value lexbuf )
# 888 "driver.ml"

  | 1 ->
# 110 "driver.mll"
             ( value lexbuf )
# 893 "driver.ml"

  | 2 ->
let
# 111 "driver.mll"
                a
# 899 "driver.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 111 "driver.mll"
                  ( a )
# 903 "driver.ml"

  | 3 ->
# 112 "driver.mll"
          ( string_val (Buffer.create 10) lexbuf )
# 908 "driver.ml"

  | 4 ->
# 113 "driver.mll"
        ( failwith "Ident or String expected" )
# 913 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_value_rec lexbuf __ocaml_lex_state

and string_val buf lexbuf =
   __ocaml_lex_string_val_rec buf lexbuf 31
and __ocaml_lex_string_val_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 116 "driver.mll"
        ( Buffer.contents buf;)
# 925 "driver.ml"

  | 1 ->
let
# 117 "driver.mll"
                    c
# 931 "driver.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 118 "driver.mll"
      ( Buffer.add_char buf c;
        string_val buf lexbuf )
# 936 "driver.ml"

  | 2 ->
let
# 120 "driver.mll"
                                    c
# 942 "driver.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 121 "driver.mll"
      ( Buffer.add_char buf
          (match c with 'n' -> '\n' | 'r' -> '\r' | 't' -> '\t' | _ -> c);
        string_val buf lexbuf )
# 948 "driver.ml"

  | 3 ->
# 125 "driver.mll"
      ( string_val buf lexbuf )
# 953 "driver.ml"

  | 4 ->
let
# 126 "driver.mll"
               c
# 959 "driver.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 127 "driver.mll"
      ( Buffer.add_char buf '\\';
        Buffer.add_char buf c;
        string_val buf lexbuf )
# 965 "driver.ml"

  | 5 ->
# 131 "driver.mll"
      ( failwith "Unterminated string" )
# 970 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_val_rec buf lexbuf __ocaml_lex_state

and recstring acc lexbuf =
   __ocaml_lex_recstring_rec acc lexbuf 39
and __ocaml_lex_recstring_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 134 "driver.mll"
                 ( recstring acc lexbuf )
# 982 "driver.ml"

  | 1 ->
# 135 "driver.mll"
         ( newline lexbuf ; recstring acc lexbuf )
# 987 "driver.ml"

  | 2 ->
# 136 "driver.mll"
         ( acc )
# 992 "driver.ml"

  | 3 ->
let
# 137 "driver.mll"
             field
# 998 "driver.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 137 "driver.mll"
                   ( recstring_bis acc field lexbuf )
# 1002 "driver.ml"

  | 4 ->
# 138 "driver.mll"
      ( failwith "Identifier or '}' expected" )
# 1007 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_recstring_rec acc lexbuf __ocaml_lex_state

and recstring_bis acc field lexbuf =
   __ocaml_lex_recstring_bis_rec acc field lexbuf 47
and __ocaml_lex_recstring_bis_rec acc field lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 140 "driver.mll"
           ( recstring_bis acc field lexbuf )
# 1019 "driver.ml"

  | 1 ->
# 141 "driver.mll"
         ( newline lexbuf ; recstring_bis acc field lexbuf )
# 1024 "driver.ml"

  | 2 ->
# 142 "driver.mll"
         ( recstring_ter acc field lexbuf )
# 1029 "driver.ml"

  | 3 ->
# 143 "driver.mll"
         ( failwith "'=' expected" )
# 1034 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_recstring_bis_rec acc field lexbuf __ocaml_lex_state

and recstring_ter acc field lexbuf =
   __ocaml_lex_recstring_ter_rec acc field lexbuf 52
and __ocaml_lex_recstring_ter_rec acc field lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 145 "driver.mll"
           ( recstring_ter acc field lexbuf )
# 1046 "driver.ml"

  | 1 ->
# 146 "driver.mll"
           ( newline lexbuf ; recstring_ter acc field lexbuf )
# 1051 "driver.ml"

  | 2 ->
let
# 147 "driver.mll"
             name
# 1057 "driver.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 147 "driver.mll"
                  ( recstring ((field,name)::acc) lexbuf )
# 1061 "driver.ml"

  | 3 ->
# 149 "driver.mll"
      ( let name = string_val (Buffer.create 10) lexbuf in
        recstring ((field,name)::acc) lexbuf
      )
# 1068 "driver.ml"

  | 4 ->
# 152 "driver.mll"
      ( failwith "Identifier or String expected" )
# 1073 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_recstring_ter_rec acc field lexbuf __ocaml_lex_state

and recorstring lexbuf =
   __ocaml_lex_recorstring_rec lexbuf 59
and __ocaml_lex_recorstring_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 155 "driver.mll"
           ( newline lexbuf ; recorstring lexbuf )
# 1085 "driver.ml"

  | 1 ->
# 156 "driver.mll"
           ( recorstring lexbuf )
# 1090 "driver.ml"

  | 2 ->
# 157 "driver.mll"
           ( `String (string_val (Buffer.create 10) lexbuf) )
# 1095 "driver.ml"

  | 3 ->
# 158 "driver.mll"
           ( `RecString (recstring [] lexbuf) )
# 1100 "driver.ml"

  | 4 ->
let
# 159 "driver.mll"
         c
# 1106 "driver.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 159 "driver.mll"
           ( failwith (Printf.sprintf "found '%c' instead of \" or {" c) )
# 1110 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_recorstring_rec lexbuf __ocaml_lex_state

and reclink acc lexbuf =
   __ocaml_lex_reclink_rec acc lexbuf 65
and __ocaml_lex_reclink_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 162 "driver.mll"
                 ( reclink acc lexbuf )
# 1122 "driver.ml"

  | 1 ->
# 163 "driver.mll"
         ( newline lexbuf ; reclink acc lexbuf )
# 1127 "driver.ml"

  | 2 ->
# 164 "driver.mll"
         ( acc )
# 1132 "driver.ml"

  | 3 ->
let
# 165 "driver.mll"
             field
# 1138 "driver.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 165 "driver.mll"
                   ( reclink_bis acc field lexbuf )
# 1142 "driver.ml"

  | 4 ->
# 166 "driver.mll"
      ( failwith "Identifier or '}' expected" )
# 1147 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_reclink_rec acc lexbuf __ocaml_lex_state

and reclink_bis acc field lexbuf =
   __ocaml_lex_reclink_bis_rec acc field lexbuf 73
and __ocaml_lex_reclink_bis_rec acc field lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 168 "driver.mll"
           ( reclink_bis acc field lexbuf )
# 1159 "driver.ml"

  | 1 ->
# 169 "driver.mll"
           ( newline lexbuf ; reclink_bis acc field lexbuf )
# 1164 "driver.ml"

  | 2 ->
# 170 "driver.mll"
           ( reclink_ter acc field lexbuf )
# 1169 "driver.ml"

  | 3 ->
# 171 "driver.mll"
           ( failwith "'=' expected" )
# 1174 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_reclink_bis_rec acc field lexbuf __ocaml_lex_state

and reclink_ter acc field lexbuf =
   __ocaml_lex_reclink_ter_rec acc field lexbuf 78
and __ocaml_lex_reclink_ter_rec acc field lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 173 "driver.mll"
           ( reclink_ter acc field lexbuf )
# 1186 "driver.ml"

  | 1 ->
# 174 "driver.mll"
           ( newline lexbuf ; reclink_ter acc field lexbuf )
# 1191 "driver.ml"

  | 2 ->
let
# 175 "driver.mll"
             name
# 1197 "driver.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 176 "driver.mll"
      ( let link  = name,(bal lexbuf) in
        reclink ((field,link)::acc) lexbuf
      )
# 1203 "driver.ml"

  | 3 ->
# 180 "driver.mll"
      ( let name = string_val (Buffer.create 10) lexbuf in
        let link = name,(bal lexbuf) in
        reclink ((field,link)::acc) lexbuf
      )
# 1211 "driver.ml"

  | 4 ->
# 184 "driver.mll"
      ( failwith "Identifier or String expected" )
# 1216 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_reclink_ter_rec acc field lexbuf __ocaml_lex_state

and bal lexbuf =
   __ocaml_lex_bal_rec lexbuf 85
and __ocaml_lex_bal_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 187 "driver.mll"
         ( newline lexbuf ; bal lexbuf )
# 1228 "driver.ml"

  | 1 ->
# 188 "driver.mll"
           ( bal lexbuf )
# 1233 "driver.ml"

  | 2 ->
# 189 "driver.mll"
                      ( `Right )
# 1238 "driver.ml"

  | 3 ->
# 190 "driver.mll"
                      ( `Nary )
# 1243 "driver.ml"

  | 4 ->
let
# 191 "driver.mll"
                          c
# 1249 "driver.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 191 "driver.mll"
                            ( if c = "" then `Default else `Left )
# 1253 "driver.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_bal_rec lexbuf __ocaml_lex_state

;;

# 193 "driver.mll"
 

  let pretty fmt = function
    | EOF -> Format.pp_print_string fmt "<eof>"
    | KEY a | ID a -> Format.fprintf fmt "'%s'" a
    | LINK s -> Format.fprintf fmt "\"%s\"" s
    | BOOLEAN | INTEGER | REAL | INT _ | FLT _  | KIND _ ->
	Format.pp_print_string fmt "<type>"
    | FIELD(group,name) -> Format.fprintf fmt "%s.%s" group name
    | RECLINK _ -> Format.pp_print_string fmt "<reclink>"

  type input = {
    lexbuf : Lexing.lexbuf ;
    mutable position : Lexing.position ;
    mutable current : token ;
  }

  let skip input =
    if input.current <> EOF then
      begin
        input.position <- input.lexbuf.lex_curr_p ;
        input.current <- tok input.lexbuf ;
      end

  let token input = input.current

  let source input = input.position

  let value input =
    if input.current = EOF then failwith "Value expected"
    else
      let v = value input.lexbuf in
      skip input; v

  let key input a = match token input with
    | KEY b when a=b -> skip input ; true
    | _ -> false

  let skipkey input a = match token input with
    | KEY b when a=b -> skip input
    | _ -> failwith (Printf.sprintf "Missing '%s'" a)

  let noskipkey input a = match token input with
    | KEY b when a=b -> ()
    | _ -> failwith (Printf.sprintf "Missing '%s'" a)


  let ident input = match token input with
    | ID x | LINK x -> skip input ; x
    | _ -> failwith "missing identifier"

  let kind input =
    let kd = match token input with
      | INTEGER -> Z
      | REAL -> R
      | BOOLEAN -> A
      | INT i -> I (Ctypes.c_int i)
      | FLT f -> F (Ctypes.c_float f)
      | KIND x -> x
      | ID _ -> A
      | _ -> failwith "<type> expected"
    in skip input ; kd

  let parameter input =
    let k = kind input in
    match token input with
      | ID _ -> skip input ; k
      | _ -> k

  let rec parameters input =
    if key input ")" then [] else
      let p = parameter input in
      if key input "," then p :: parameters input else
	if key input ")" then [p] else
	  failwith "Missing ',' or ')'"

  let signature input =
    if key input "(" then parameters input else []

  let rec depend input =
    match token input with
      | ID a | LINK a ->
	  skip input ;
	  ignore (key input ",") ;
	  a :: depend input
      | _ -> []

  let link def input =
    match token input with
      | LINK f | ID f ->
        let link = conv_bal def (f,(bal input.lexbuf)) in
        skip input; Lang.infoprover link
      | RECLINK l ->
        skip input ;
        begin try
          {Lang.altergo = conv_bal def (List.assoc "altergo" l);
                why3    = conv_bal def (List.assoc "why3" l);
                coq     = conv_bal def (List.assoc "coq" l) }
        with Not_found ->
          failwith "a link must contain an entry for 'altergo', 'why3' and 'coq'"
        end
      | _ -> failwith "Missing link symbol"

  let linkstring input =
    match recorstring input.lexbuf with
      | `String f ->
        skip input ; Lang.infoprover f
      | `RecString l ->
        skip input ;
        begin try
          {Lang.altergo = List.assoc "altergo" l;
                why3    = List.assoc "why3" l;
                coq     = List.assoc "coq" l }
        with Not_found ->
          failwith "a link must contain an entry for 'altergo', 'why3' and 'coq'"
        end
      | _ -> failwith "Missing link symbol"

  let input_string input =
    match token input with
      | LINK f | ID f ->
        skip input ; f
      | _ -> failwith "String or ident expected"


  let op = {
    invertible = false ;
    associative = false ;
    commutative = false ;
    idempotent = false ;
    neutral = E_none ;
    absorbant = E_none ;
  }

  let op_elt input =
    ignore (key input ":") ;
    let op = input_string input in
    skipkey input ":" ;
    match op with
      | "0" -> E_int 0
      | "1" -> E_int 1
      | "-1" -> E_int (-1)
      | "\\true" -> E_true
      | "\\false" -> E_false
      | _ ->
          match LogicBuiltins.constant op with
          | ACSLDEF -> failwith (Printf.sprintf "Symbol '%s' not found" op)
          | HACK _ -> failwith (Printf.sprintf "Symbol '%s' hacked" op)
          | LFUN lfun -> E_fun(lfun,[])
                             
  let rec op_link op input =
    match token input with
      | LINK _ | RECLINK _ ->
          Operator op, link `Left input
      | ID "associative" -> skip input ; skipkey input ":" ;
	  op_link { op with associative = true } input
      | ID "commutative" -> skip input ; skipkey input ":" ;
	  op_link { op with commutative = true } input
      | ID "ac" -> skip input ; skipkey input ":" ;
	  op_link { op with commutative = true ; associative = true } input
      | ID "idempotent" -> skip input ; skipkey input ":" ;
	  op_link { op with idempotent = true } input
      | ID "invertible" -> skip input ; skipkey input ":" ;
	  op_link { op with invertible = true } input
      | ID "neutral" ->
	  skip input ; let e = op_elt input in
	  op_link { op with neutral = e } input
      | ID "absorbant" ->
	  skip input ; let e = op_elt input in
	  op_link { op with absorbant = e } input
      | ID t -> failwith (Printf.sprintf "Unknown tag '%s'" t)
      | _ -> failwith "Missing <tag> or <link>"

  let logic_link input =
    match token input with
      | LINK _ | RECLINK _ ->
	  Function, link `Nary input
      | ID "constructor" ->
	  skip input ; skipkey input ":" ;
	  Qed.Logic.Constructor, link `Nary input
      | ID "injective" ->
	  skip input ; skipkey input ":" ;
	  Injection, link `Nary input
      | _ -> op_link op input

  let rec parse ~driver_dir library input =
    match token input with
      | EOF -> ()
      | KEY "library" ->
          skip input ;
          let name = input_string input in
          ignore (key input ":") ;
          let depends = depend input in
          ignore (key input ";") ;
          add_library name depends ;
          parse ~driver_dir name input
      | KEY "type" ->
	  skip input ;
          let name = ident input in
          let source = source input in
          noskipkey input "=" ;
          let link = linkstring input in
          add_type ~source:(Cil_datatype.Position.of_lexing_pos source) name ~library ~link () ;
	  skipkey input ";" ;
	  parse ~driver_dir library input
      | KEY "ctor" ->
	  skip input ;
	  let name = ident input in
          let source = source input in
	  let args = signature input in
	  skipkey input "=" ;
	  let link = link `Nary input in
	  add_ctor ~source:(Cil_datatype.Position.of_lexing_pos source) name args ~library ~link () ;
	  skipkey input ";" ;
	  parse ~driver_dir library input
      | KEY "logic" ->
	  skip input ;
	  let result = kind input in
	  let name = ident input in
          let source = source input in
	  let args = signature input in
          if key input ":=" then
            begin
              let alias = ident input in
              add_alias ~source:(Cil_datatype.Position.of_lexing_pos source) name args ~alias () ;
            end
          else
            begin
	      skipkey input "=" ;
              let category,link = logic_link input in
              add_logic ~source:(Cil_datatype.Position.of_lexing_pos source) result name args ~library ~category ~link () ;
            end ;
          skipkey input ";" ;
	  parse ~driver_dir library input
      | KEY "predicate" ->
	  skip input ;
	  let name = ident input in
          let source = source input in
	  let args = signature input in
          if key input ":=" then
            begin
              let alias = ident input in
              add_alias ~source:(Cil_datatype.Position.of_lexing_pos source) name args ~alias () ;
            end
          else
            begin
	      noskipkey input "=" ;
	      let link = linkstring input in
	      add_predicate ~source:(Cil_datatype.Position.of_lexing_pos source) name args ~library ~link () ;
            end ;
          skipkey input ";" ;
          parse ~driver_dir library input
      | FIELD (group,var) ->
	skip input ;
        begin match token input with
        | KEY ":=" ->
          let v = value input in
          set_option ~driver_dir group var ~library v
        | KEY "+=" ->
          let v = value input in
          add_option ~driver_dir group var ~library v
        | _ -> failwith "Missing ':=' or '+='"
        end;
        skipkey input ";" ;
        parse ~driver_dir library input
      | _ -> failwith "Unexpected entry"

  let load_file ?(ontty=`Transient) file =
    try
      let path = Datatype.Filepath.of_string file in
      Wp_parameters.feedback ~ontty "Loading driver '%a'"
        Datatype.Filepath.pretty path;
      let driver_dir = Filename.dirname file in
      let inc = open_in file in
      let lex = Lexing.from_channel inc in
      let position = { lex.Lexing.lex_curr_p with Lexing.pos_fname = file } in
      let input = { current = tok lex ; position = position ; lexbuf = lex } in
      try
        lex.Lexing.lex_curr_p <- position ;
	parse ~driver_dir "qed" input ;
	close_in inc
      with Failure msg ->
	close_in inc ;
	let source = lex.Lexing.lex_start_p in
	Wp_parameters.abort ~current:false
          ~source:(Cil_datatype.Position.of_lexing_pos source) "(Driver Error) %s (at %a)" msg
          pretty (token input)
    with exn ->
      Wp_parameters.abort
        ~current:false
        "Error in driver '%s': %s" file (Printexc.to_string exn)

  (*TODO[LC] Think about projectification ... *)
  let dkey = Wp_parameters.register_category "includes"
  let dkey_driver = Wp_parameters.register_category "driver"

  let loaded : (string list, driver) Hashtbl.t =Hashtbl.create 10
  let load_driver () =
    let drivers = Wp_parameters.Drivers.get () in
    begin try
        let driver = Hashtbl.find loaded drivers in
        Context.set LogicBuiltins.driver driver
      with Not_found ->
	let driver_basename file =
	  let base = Filename.basename file in
	  try Filename.chop_extension base
	  with Invalid_argument _ -> base in
	let drvs = List.map driver_basename drivers in
        let id = String.concat "_" drvs in
	let descr = String.concat "," drvs in
        let includes =
          let directories =
            try [Wp_parameters.Share.dir ~error:false ()]
            with Wp_parameters.Share.No_dir -> [] in
          if Wp_parameters.has_dkey dkey then
            Wp_parameters.debug ~dkey "Included directories:%t"
              (fun fmt ->
                 List.iter
                   (fun d -> Format.fprintf fmt "@\n - '%s'" d)
                   directories
              );
          directories
        in
        LogicBuiltins.init ~id ~descr ~includes () ;
	let drivers =
	  List.map (fun file ->
		      if Sys.file_exists file
		      then Filepath.normalize file
		      else LogicBuiltins.find_lib file)
            drivers in
        let default = Wp_parameters.Share.file ~error:true "wp.driver" in
        let feedback = Wp_parameters.Share.Dir_name.is_set () in
        let ontty = if feedback then `Message else `Transient in
        load_file ~ontty default;
        List.iter load_file drivers;
        Hashtbl.add loaded drivers (Context.get LogicBuiltins.driver);
        if Wp_parameters.has_dkey dkey_driver  then LogicBuiltins.dump ()
    end ; Context.get LogicBuiltins.driver


# 1601 "driver.ml"
